;;;; A demo / casual workshop for the Glasgow CodeCraft meetup
;;;;
;;;; This code was adapted from the talk that Andrew Sorensen gave at
;;;; Codemania 2015: "A Programmers's Guide to Western Music"

;;; Extempore Music Preparation
;;;
;;; Let's set up the system in preparation for making music:

(define prefix "/Users/oubiwann/lab/lfe/undertone-music/extempore-backend/")
(define prefix "/Users/dmcgreggor/lab/lfe/undertone-music/extempore-backend/")

(sys:load (string-append prefix "demos/glasgow-codecraft-2021/init.xtm"))

;; define a synth using the provided component fmsynth
(make-instrument synth fmsynth)
(make-instrument asynth analogue)

;; add the instrument to the DSP output sink closure
(bind-func dsp:DSP
  (lambda (in time chan dat)
    (+ (synth in time chan dat)
       (asynth in time chan dat))))

(dsp:set! dsp)

;;; Sound Check!
;;;
;;; Create a function to play a note .. then play it :-)

(define *default-vol* 80)

(define play-something
  (lambda ()
    (play-note (now) synth c5 *default-vol* (* 3.0 *second*))))

(play-something)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Model 1
;;;
;;; 1000 A.D., Black Adder Series 1 - notes played in a sequence, acting in harmony

(define *scale* (pc:scale c1 'aeolian))

(define model1
  (lambda (beat pitch step dur)
    (play-note (now) synth pitch *default-vol* (* dur *second*))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model1
              (+ beat dur)
              (if (= 0 (modulo (+ step 1) 8))
                  (pc:relative pitch 6 *scale*)
                  (pc:relative pitch -1 *scale*))
              (+ step 1)
              (random '(3 4 5)))))

(define initial-pitch c7)
(define initial-step 0)
(define initial-dur 4)

(model1 (*metro* 'get-beat 4) initial-pitch initial-step initial-dur)
(model1 (*metro* 'get-beat 4) c6 0 4)

(define model1
  (lambda (beat pitch step dur)
    (play-note (now) synth pitch *default-vol* (* dur *second*))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model1
              (+ beat dur)
              (if (= 0 (modulo (+ step 1) 8))
                  (pc:relative pitch 6 scale)
                  (pc:relative pitch -1 scale))
              (+ step 1)
              (random '(4 5 6)))))

(define model1
  (lambda (beat pitch step dur)
    (play-note (now) synth pitch *default-vol* (* dur *second*))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model1
              (+ beat dur)
              (if (= 0 (modulo (+ step 1) 8))
                  (pc:relative pitch 6 scale)
                  (pc:relative pitch -1 scale))
              (+ step 1)
              (random '(5 6 7)))))

(model1 (*metro* 'get-beat 4) c5 0 6)

(define model1
  (lambda (beat pitch step dur)
    (play-note (now) synth pitch *default-vol* (* dur *second*))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model1
              (+ beat dur)
              (if (= 0 (modulo (+ step 1) 8))
                  (pc:relative pitch 6 scale)
                  (pc:relative pitch -1 scale))
              (+ step 1)
              (random '(7 8 9)))))

(model1 (*metro* 'get-beat 4) c4 0 6)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Model 2
;;;
;;; 1500 A.D., Black Adder Series 2 - chords!

(define *lo* c3)
(define *hi* c6)
(define *notes-per-chord* 3)
(define *key* c0)
(define major '^)
(define minor '-)
(define *mode* major)
(define *transitions* '((i v)
                        (v i)))

(define model2
  (lambda (beat dur degree)
    (map (lambda (p)
           (play-note (now) synth p *default-vol* (* dur *second*)))
         (pc:make-chord *lo*
                        *hi*
                        *notes-per-chord*
                        (pc:diatonic *key* *mode* degree)))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model2
              (+ beat dur)
              (random '(2 4))
              (random (cdr (assoc degree *transitions*))))))

(model2 (*metro* 'get-beat 4) 2 'i)

(define *transitions* '((i iv v)
                        (iv i)
                        (v i)))

(define *transitions* '((i iv v vi)
                        (iv i)
                        (v i)
                        (vi iv)))

(define *notes-per-chord* 8)
(define *hi* c7)
(define *lo* c2)
(define *mode* minor)
(define *mode* major)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Model 3
;;;
;;; 1800 A.D., Black Adder Series 3 - arpeggios and syncopation

(define *notes-per-chord* 3)
(define *mode* minor)

(dsp.wet 1.0)
(dsp.dry 1.0)

(define model3
  (lambda (beat dur degree)
    (let ((chrd (pc:make-chord-fixed c4
                                     *notes-per-chord*
                                     (pc:diatonic *key* *mode* degree))))
      (map (lambda (p o)
             (play-note (+ (now) (* o *second*)) synth p *default-vol* (* dur *second*)))
           chrd
           (range 0 3)))
      (callback (*metro* (+ beat (* 0.5 dur)))
                'model3
                (+ beat dur)
                3
                (random (cdr (assoc degree *transitions*))))))

(model3 (*metro* 'get-beat 4) 3 'i)

;; XXX add MIDI version for piano
