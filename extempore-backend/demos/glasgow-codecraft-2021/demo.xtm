;;;; A demo / casual workshop for the Glasgow CodeCraft meetup
;;;;
;;;; This code was adapted from the talk that Andrew Sorensen gave at
;;;; Codemania 2015: "A Programmers's Guide to Western Music"

;;; Extempore Installation
;;;
;;; Download for your platform from: 
;;; * https://github.com/digego/extempore/releases/tag/v0.8.8
;;;
;;; Decompress and install to your preferred location. For example,
;;; my latest version of Extempore is saved to /opt/extempore/8.8.0.
;;;
;;; Starting Extempore
;;;
;;; To help keeping the timings consistent, especially when creating
;;; music with sequences, a la Berlin School, you'll want to reduce
;;; the framerate. I've found 64 is a great default for this which
;;; keeps all the sequences playing nicely in time.

;;; Extempore Music Preparation

(define prefix "/Users/oubiwann/lab/lfe/undertone-music/extempore-backend/")

(sys:load (string-append prefix "demos/glasgow-codecraft-2021/init.xtm"))

;; define a synth using the provided component fmsynth
(make-instrument synth fmsynth)

;; add the instrument to the DSP output sink closure
(bind-func dsp:DSP
  (lambda (in time chan dat)
    (synth in time chan dat)))

(dsp:set! dsp)

;; create a function to play a note
(define play-something
  (lambda ()
    (play-note (now) synth 60 80 (* 2.0 *second*))))

(play-something)

;; set up the first model

(define *default-vol* 80)

(define scale (pc:scale c1 'aeolian))

(define model1
  (lambda (beat pitch step dur)
    (play-note (now) synth pitch *default-vol* (* dur *second*))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model1
              (+ beat dur)
              (if (= 0 (modulo (+ step 1) 8))
                  (pc:relative pitch 6 scale)
                  (pc:relative pitch -1 scale))
              (+ step 1)
              (random '(3 4 5)))))

(define initial-pitch c7)
(define initial-step 0)
(define initial-dur 4)

(model1 (*metro* 'get-beat 4) initial-pitch initial-step initial-dur)
(model1 (*metro* 'get-beat 4) c6 0 4)

(define model1
  (lambda (beat pitch step dur)
    (play-note (now) synth pitch *default-vol* (* dur *second*))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model1
              (+ beat dur)
              (if (= 0 (modulo (+ step 1) 8))
                  (pc:relative pitch 6 scale)
                  (pc:relative pitch -1 scale))
              (+ step 1)
              (random '(4 5 6)))))

(define model1
  (lambda (beat pitch step dur)
    (play-note (now) synth pitch *default-vol* (* dur *second*))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model1
              (+ beat dur)
              (if (= 0 (modulo (+ step 1) 8))
                  (pc:relative pitch 6 scale)
                  (pc:relative pitch -1 scale))
              (+ step 1)
              (random '(5 6 7)))))

(model1 (*metro* 'get-beat 4) c5 0 6)

(define model1
  (lambda (beat pitch step dur)
    (play-note (now) synth 7  0 *default-vol* (* dur *second*))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model1c
              (+ beat dur)
              (if (= 0 (modulo (+ step 1) 8))
                  (pc:relative pitch 6 scale)
                  (pc:relative pitch -1 scale))
              (+ step 1)
              (random '(7 8 9)))))

(model1 (*metro* 'get-beat 4) c4 0 6)

