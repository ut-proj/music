;;;; A piano piece, sequel to the piano piece recorded here
;;;; (performed / recorded with undertone):
;;;; * https://soundcloud.com/oubiwann/journey-of-the-source-variation-3
;;;;
;;;; The definitions in this file may be used with the Emacs Extempore plugin
;;;; or via the undertone Extempore REPL, started with the following:
;;;; * (undertone.repl.extempore:start)
;;;;

;;; Extempore Music Preparation
;;;
;;; Let's set up the system in preparation for making music:

(define prefix "/Users/oubiwann/lab/ut-proj/music/extempore-backend/")
;;(define prefix "/Users/dmcgreggor/lab/ut-proj/music/extempore-backend/")

(sys:load (string-append prefix "init.xtm"))
(sys:load (string-append prefix "funs.xtm"))

(begin (pm_print_devices) (println))

;; Select the right one and define some constants
(define primary-midi-device-id 3)
(define *midiout* (pm_create_output_stream primary-midi-device-id))
(define *midi-channel* 0)

(*metro* 'set-tempo 40)

(define *default-vol* 40)
(define *scale* (pc:scale ab1 'aeolian))
(define initial-pitch ab7)
(define initial-step 0)
(define initial-dur 4)

(define *midi-off* 0)
(define *midi-semi-off* 50) ; for use with pedal muting
(define *midi-on* 127)
(define *midi-sustain* 64)

(send-midi-cc (now) *midiout* *midi-sustain* *midi-off* *midi-channel*)

(define *key* ab1)
(define *lo-bass* (+ *key* 0))
(define *hi-bass* (+ *lo-bass* 17))
(define *lo-melody* (+ *lo-bass* 12))
(define *hi-melody* (+ *hi-bass* 12))

(define minor '-)
(define major '^)
(define *mode* minor)

;;(define *scale* (pc:scale *key* 'harmonic))
;;(define *scale* (pc:scale *key* 'aeolian))

(define *beats-per-measure* 3)
(define *octave* 12)

;; Voice 1 is the bass (npc = notes per chord)
(define *v1-npc* 5)

;; Voice 2 is the low harmony
(define *v2-npc* 5)

;; Voice 3 is the melody
(define *v3-npc* 3)

(define *vol-trans*
  '((0 30)
    (10 30)
    (20 30)
    (30 30 30 40 40)
    (40 30 40 40 50)
    (50 40 50 50 60)
    (60 40 50 60 60 70)
    (70 50 60 60 70 80)
    (80 60 70 70 80 90)
    (90 70 80 80 90 100)
    (100 80 90 100 110)
    (110 90 100 110)))

(define *transitions* '((i i iv)
                        (iv i iv v)
                        (v i v)))

(define *transitions* '((i i v)
                        (iv i)
                        (v i v)
                        (vi i)))

(define *transitions* '((i i iv)
                        (iv i iv)
                        (v i iv)
                        (vi i)))

(define *transitions* '((i i i iv v vi)
                        (iv i iv)
                        (v i v)
                        (vi iv vi)))

(define *transitions* '((i i i iv n6 v vi viio)
                        (iv i iv)
                        (n6 viio i)
                        (v i v)
                        (vi iv vi)
                        (viio i)))


(define *transitions* '((i ii)
                        (ii n6)
                        (n6 viio6)
                        (viio6 i)))


(define *transitions* '((i ii)
                        (ii n6)
                        (n6 viio7)
                        (viio7 i)))

(define *transitions* '((i iii)
                        (iii iv7)
                        (iv7 viio7)
                        (viio7 n6)
                        (n6 i)))

;; This one was GREAT with the electric guitar ... it's going to enter the regular
;; jam session line up :-)
(define *transitions* '((i i64)
                        (i64 iii)
                        (iii v)
                        (v viio)
                        (viio i)))

;; Inspired by Max Richter
(define *transitions* '((i        (i -sus) (i -9))
                        ((i -sus) i)
                        ((i -2)   i)
                        ((i -7)   i)
                        ((i -9)   (i -2))))

(define make-chord
  (lambda (lo hi count key mode type)
    (let ((basis (if (degree? type)
                     (pc:diatonic key mode type)
                     (pc:chord (car (pc:diatonic key mode (car type))) (cadr type)))))
      (pc:make-chord lo
                     hi
                     count
                     basis))))

(define press-pedal
  (lambda ()
    ;; Release
    (send-midi-cc (now)
                  *midiout*
                  *midi-sustain*
                  *midi-off*
                  *midi-channel*)
    ;; Depress
    (send-midi-cc (+ (now) (*metro* 'get-beat 1/8))
                  *midiout*
                  *midi-sustain*
                  *midi-on* *midi-channel*)))

(define model3
  (lambda (beat dur degree vol)
    (println 'next 'degree '= degree)
    (press-pedal)
    (let ((bass-chrd (uniq (make-chord *lo-bass* (+ 12 *hi-bass*) *v1-npc* *key* *mode* degree))))
      (play-chord beat *beats-per-measure* bass-chrd (markov-sel vol *vol-trans*))
      (callback (*metro* (+ beat (* 0.5 dur)))
                'model3
                (+ beat dur)
                *beats-per-measure*
                (markov-sel degree *transitions*)
                (markov-sel vol *vol-trans*)))))

(model3 (*metro* 'get-beat 4) *beats-per-measure* 'i *default-vol*)

(define model3
  (lambda (beat dur degree vol)
    (println 'next 'degree '= degree)
    (press-pedal)
    (let ((chrd (uniq (make-chord *lo-melody* *hi-melody* *v3-npc* *key* *mode* degree)))
          (bass-chrd (uniq (make-chord *lo-bass* (+ 12 *hi-bass*) (- *v1-npc* 2) *key* *mode* degree))))
      (play-arpeggio beat *beats-per-measure* chrd 1 vol 0)
      (play-chord beat *beats-per-measure* bass-chrd (markov-sel (- vol 10) *vol-trans*)))
      (callback (*metro* (+ beat (* 0.5 dur)))
                'model3
                (+ beat dur)
                *beats-per-measure*
                (markov-sel degree *transitions*)
                (markov-sel vol *vol-trans*))))

(define play-cell
  (lambda (beat note notes-per-chord cell vol)
    (let* ((octave-bump (random (car cell)))
           (melody (pc:make-chord-fixed (+ note octave-bump)
                                        notes-per-chord
                                        *scale*))
           (dur (random (cadr cell))))
      (play-arpeggio beat 3 melody dur (markov-sel vol *vol-trans*) 0))))


(define cell1 '((0 0)
                (5/2 1/2)))

(define cells (list cell1))

(define model3
  (lambda (beat dur degree vol)
    (println 'next 'degree '= degree)
    (press-pedal)
    (let ((chrd (uniq (make-chord *lo-melody* *hi-melody* *v3-npc* *key* *mode* degree)))
          (bass-chrd (uniq (make-chord *lo-bass* *hi-bass* (- *v1-npc* 2) *key* *mode* degree))))
      (play-arpeggio beat *beats-per-measure* chrd 1 vol 0)
      (play-chord beat *beats-per-measure* bass-chrd (markov-sel (- vol 10) *vol-trans*))
      (play-cell beat
                 (+ *octave* (random chrd))
                 *v3-npc*
                 (random cells)
                 (markov-sel vol *vol-trans*)))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model3
              (+ beat dur)
              *beats-per-measure*
              (markov-sel degree *transitions*)
              (markov-sel vol *vol-trans*))))

;; Inspired by Max Richter
(define *transitions* '((i        (i -sus) (i -9))
                        (ii       (i -sus) ii)
                        ((i -sus) i ii)
                        ((i -2)   i ii)
                        ((i -7)   i)
                        ((i -9)   (i -2))))

(define cell2 '((-2 1 1)
                (1 1 1)))

(define cells (list cell1 cell2))

;; No bass chords
(define model3
  (lambda (beat dur degree vol)
    (println 'next 'degree '= degree)
    (let ((chrd (uniq (make-chord *lo-melody* *hi-melody* *v3-npc* *key* *mode* degree))))
      (play-cell beat
                 (+ *octave* (random chrd))
                 *v3-npc*
                 (random cells)
                 (markov-sel vol *vol-trans*))
      (play-arpeggio beat *beats-per-measure* chrd 1 *default-vol* 0))
      (callback (*metro* (+ beat (* 0.5 dur)))
                'model3
                (+ beat dur)
                *beats-per-measure*
                (markov-sel degree *transitions*)
                (markov-sel vol *vol-trans*))))

;; Inspired by Max Richter
(define *transitions* '((i        i (i -sus) (i -9))
                        (ii       (i -sus))
                        ((i -sus) (i -sus) iv)
                        ((i -2)   (i -2) vii vii)
                        ((i -7)   (i -7) i)
                        ((i -9)   (i -2) (i -9) )
                        (iv       i iv)
                        (vii      i vii)))

(define model3
  (lambda (beat dur degree vol)
    (println 'next 'degree '= degree)
    (press-pedal)
    (let ((chrd (uniq (make-chord *lo-melody* *hi-melody* *v3-npc* *key* *mode* degree)))
          (bass-chrd (uniq (make-chord (+ 12 *lo-bass*) (+ 12 *hi-bass*) (- *v1-npc* 1) *key* *mode* degree))))
      (play-arpeggio beat *beats-per-measure* chrd 1 vol 0)
      (play-chord-sustain beat *beats-per-measure* bass-chrd (markov-sel vol *vol-trans*))
      (play-cell beat
                 (+ *octave* (random chrd))
                 *v3-npc*
                 (random cells)
                 (markov-sel vol *vol-trans*)))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model3
              (+ beat dur)
              *beats-per-measure*
              (markov-sel degree *transitions*)
              (markov-sel vol *vol-trans*))))

(define cell3 '((0 1)
                (3/2 3/2)))

(define cells (list cell1 cell2 cell3))

(define identity
  (lambda (lst)
    lst))

(define inverter
  (lambda (lst)
    (pc:invert lst *scale*)))

(define higher
  (lambda (lst)
    (map (lambda (x) (+ *octave* x)) lst)))

(define play-cell
  (lambda (beat note notes-per-chord cell vol)
    (let* ((octave-bump (random (car cell)))
           (notes (pc:make-chord-fixed (+ note octave-bump)
                                       notes-per-chord
                                       *scale*))
           (xform (random (list identity
                                inverter
                                inverter
                                jumble
                                jumble
                                jumble)))
           (dur (random (cadr cell))))
      (play-arpeggio beat
                     *beats-per-measure*
                     (xform notes)
                     dur
                     (markov-sel vol *vol-trans*)
                     0))))

;;(define *scale* (pc:scale *key* 'harmonic))
;;(define *scale* (pc:scale *key* 'aeolian))
;;(define *scale* (pc:scale eb1 'ionian))

;; Inspired by Max Richter
(define *transitions* '((i        i (i -sus) (i -9))
                        ((i -sus) (i -sus) iv iv)
                        ((i -2)   (i -2) iii vii)
                        (iii      i iii)
                        ((i -7)   (i -7) i)
                        ((i -9)   (i -2) (i -9) vi)
                        (iv       i iv)
                        (vi       (i -2))
                        (vii      i vii)))

(define model3
  (lambda (beat dur degree vol)
    (println 'next 'degree '= degree)
    (press-pedal)
    (let ((chrd (uniq (make-chord *lo-melody* *hi-melody* *v3-npc* *key* *mode* degree)))
          (bass-chrd (uniq (make-chord (+ 12 *lo-bass*) (+ 12 *hi-bass*) (- *v1-npc* 2) *key* *mode* degree)))
          (xform (random (list identity inverter jumble jumble))))
      (play-arpeggio beat *beats-per-measure* (xform chrd) 1 vol 0)
      (play-chord-sustain beat *beats-per-measure* bass-chrd (markov-sel vol *vol-trans*))
      (play-cell beat
                 (+ *octave* (random chrd))
                 *v2-npc*
                 (random cells)
                 (markov-sel vol *vol-trans*)))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model3
              (+ beat dur)
              *beats-per-measure*
              (markov-sel degree *transitions*)
              (markov-sel vol *vol-trans*))))

(define cell4 '((-2 -2 1 1)
                (2 2 2 2)))

(define cells (list cell1 cell2 cell3 cell4))
(define *v3-npc* 4)

;; Prepare to close the piece ...

;; No bass chords
(define model3
  (lambda (beat dur degree vol)
    (println 'next 'degree '= degree)
    (let ((chrd (uniq (make-chord *lo-melody* *hi-melody* *v3-npc* *key* *mode* degree))))
      (play-cell beat
                 (+ *octave* (random chrd))
                 *v3-npc*
                 (random cells)
                 (markov-sel vol *vol-trans*))
      (play-arpeggio beat *beats-per-measure* chrd 1 *default-vol* 0))
      (callback (*metro* (+ beat (* 0.5 dur)))
                'model3
                (+ beat dur)
                *beats-per-measure*
                (markov-sel degree *transitions*)
                (markov-sel vol *vol-trans*))))

;; Start reducing complexity

(define model3
  (lambda (beat dur degree vol)
    (println 'next 'degree '= degree)
    (press-pedal)
    (let ((chrd (uniq (make-chord *lo-melody* *hi-melody* *v3-npc* *key* *mode* degree)))
          (bass-chrd (uniq (make-chord *lo-bass* *hi-bass* (- *v1-npc* 2) *key* *mode* degree))))
      (play-arpeggio beat *beats-per-measure* chrd 1 vol 0)
      (play-chord beat *beats-per-measure* bass-chrd (markov-sel (- vol 10) *vol-trans*))
      (play-cell beat
                 (+ *octave* (random chrd))
                 *v3-npc*
                 (random cells)
                 (markov-sel vol *vol-trans*)))
    (callback (*metro* (+ beat (* 0.5 dur)))
              'model3
              (+ beat dur)
              *beats-per-measure*
              (markov-sel degree *transitions*)
              (markov-sel vol *vol-trans*))))

(define cells (list cell2 cell3 cell4))

;; Inspired by Max Richter
(define *transitions* '((i        (i -sus) (i -9))
                        (ii       (i -sus) ii)
                        (iii      i)
                        (iv       i)
                        (vi       (i -2))
                        (vii      i)
                        ((i -sus) i ii)
                        ((i -2)   i ii)
                        ((i -7)   i)
                        ((i -9)   (i -2))))

(define model3
  (lambda (beat dur degree vol)
    (println 'next 'degree '= degree)
    (press-pedal)
    (let ((chrd (uniq (make-chord *lo-melody* *hi-melody* *v3-npc* *key* *mode* degree)))
          (bass-chrd (uniq (make-chord *lo-bass* (+ 12 *hi-bass*) (- *v1-npc* 2) *key* *mode* degree))))
      (play-arpeggio beat *beats-per-measure* chrd 1 vol 0)
      (play-chord-sustain beat *beats-per-measure* bass-chrd (markov-sel (- vol 10) *vol-trans*)))
      (callback (*metro* (+ beat (* 0.5 dur)))
                'model3
                (+ beat dur)
                *beats-per-measure*
                (markov-sel degree *transitions*)
                (markov-sel vol *vol-trans*))))

(define *transitions* '((i        (i -sus) (i -9))
                        (ii       (i -sus))
                        ((i -sus) i)
                        ((i -2)   i)
                        ((i -7)   i)
                        ((i -9)   (i -2) i)))

(define model3
  (lambda (beat dur degree vol)
    (println 'next 'degree '= degree)
    (press-pedal)
    (let ((bass-chrd (uniq (make-chord *lo-bass* (+ 12 *hi-bass*) (- *v1-npc* 1) *key* *mode* degree))))
      (play-chord-sustain beat *beats-per-measure* bass-chrd (markov-sel (- vol 10) *vol-trans*)))
      (callback (*metro* (+ beat (* 0.5 dur)))
                'model3
                (+ beat dur)
                *beats-per-measure*
                (markov-sel degree *transitions*)
                (markov-sel vol *vol-trans*))))

(define model3)
