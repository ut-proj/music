(define triad
  (lambda (root name)
    (cond ((eq? name 'I) (pc:diatonic root major 'i))
          ((eq? name 'i) (pc:diatonic root minor 'i))
          ((eq? name 'III) (pc:diatonic root major 'iii))
          ((eq? name 'IV) (pc:diatonic root major 'iv))
          ((eq? name 'IVo) (ivl:transpose (car (pc:diatonic root major 'iv)) '(0 3 6)))
          ((eq? name 'iv) (pc:diatonic root minor 'iv))
          ((eq? name 'V) (pc:diatonic root major 'v))
          ((eq? name 'VI) (pc:diatonic root major 'vi))
          ((eq? name 'vi) (pc:diatonic root minor 'vi)))))

(define uniq
  (lambda (lst)
    (cond ((null? lst)
           '())
          ((member (car lst) (cdr lst))
           (uniq (cdr lst)))
          (else
           (cons (car lst) (uniq (cdr lst)))))))

(define play-note
  (lambda (beat dur note vol)
    (mplay *midiout*
           note
           ;;vol
           (random (cdr (assoc vol dynamic-vol-trans)))
           dur
           midi-channel)))

(define play-chord
  (lambda (beat dur chord vol)
    (for-each (lambda (note)
                (play-note beat dur note vol))
              chord)))
