;;;; The part of this example that is responsible to actually playing the score.
;;;;

;; For use in setting up song in the LFE undertone REPL, having executed the
;; following:
;;   (undertone.repl.extempore:start)
;;
;; Then:
;;   (load "priv/xt-midi/lambda-days-2021/init.xtm")
;;
;; Then, in the REPL, load the required functions:
;;   (load "priv/xt-midi/lambda-days-2021/util.xtm")
;;   (load "priv/xt-midi/lambda-days-2021/funs.xtm")
;;
;; After that, load the notes, chords, and arpeggios:
;;   (load "priv/xt-midi/lambda-days-2021/notes.xtm")

;; From Extempore, you can do:
(define prefix "/Users/dmcgreggor/lab/lfe/undertone/examples/lambda-days-2021/")
;;(define prefix "/Users/oubiwann/lab/lfe/undertone/examples/lambda-days-2021/")

(sys:load (string-append prefix "init.xtm"))
(sys:load (string-append prefix "util.xtm"))
(sys:load (string-append prefix "funs.xtm"))
(sys:load (string-append prefix "notes.xtm"))
(sys:load (string-append prefix "moog-ipad-minimoog.xtm"))

;; Now you're ready to set up the MIDI channels (coupled to tracks in the DAW)
;; for the score ... and play it:

(define primary-midi-device-id 5)
(define *midiout* (pm_create_output_stream primary-midi-device-id))

(define track1-chan 0)
(define track2-chan 1)
(define track3-chan 2)
(define track4-chan 3)
(define track5-chan 4)
(define track6-chan 5)
(define track7-chan 6)
(define track8-chan 7)
(define track9-chan 8)

(define play0
  (lambda (beat)
    (play-seq beat 4 track1-chan bass-prog0)
    (play-seq beat 4 track2-chan bass-prog0)
    (play-seq beat 4 track3-chan bass-prog0)
    (play-seq beat 4 track4-chan bass-prog0)
    (play-chords beat 4 track5-chan chords-prog0)
    (play-chords beat 4 track6-chan chords-prog0)
    (play-random beat 2 2 track8-chan chords-prog0)))

(define play1
  (lambda (beat)
    (play-seq beat 4 track1-chan bass-prog1)
    (play-seq beat 4 track2-chan bass-prog1)
    (play-seq beat 4 track3-chan bass-prog1)
    (play-seq beat 4 track4-chan bass-prog1)
    (play-chords beat 4 track5-chan chords-prog1)
    (play-chords beat 4 track6-chan chords-prog1)
    (play-seq beat 1 track7-chan prog1)
    (play-random beat 2 2 track8-chan chords-prog1)
    (play-random beat 2 2 track9-chan chords-prog1)))

(define play2
  (lambda (beat)
    (play-seq beat 4 track1-chan bass-prog1)
    (play-seq beat 4 track2-chan bass-prog1)
    (play-seq beat 2 track3-chan bass-prog2)
    (play-seq beat 2 track4-chan bass-prog2)
    (play-chords beat 2 track5-chan chords-prog2)
    (play-chords beat 2 track6-chan chords-prog2)
    (play-seq beat 1 track7-chan prog2)
    (play-random beat 0.5 4 track8-chan chords-prog2)
    (play-random beat 0.5 4 track9-chan chords-prog2)))

(define play3
  (lambda (beat)
    (play-seq beat 2 track1-chan bass-prog3)
    (play-seq beat 2 track2-chan bass-prog3)
    (play-seq beat 2 track3-chan bass-prog3)
    (play-seq beat 2 track4-chan bass-prog3)
    (play-chords beat 4 track5-chan chords-prog3)
    (play-chords beat 4 track6-chan chords-prog3)
    (play-seq beat 1 track7-chan prog3)
    (play-random beat 0.5 8 track8-chan chords-prog3)
    (play-random beat 0.5 8 track9-chan chords-prog3)))

(define play4
  (lambda (beat)
    (play-seq beat 4 track1-chan bass-prog4)
    (play-seq beat 4 track2-chan bass-prog4)
    (play-seq beat 4 track3-chan bass-prog4)
    (play-seq beat 4 track4-chan bass-prog4)
    (play-chords beat 4 track5-chan chords-prog4)
    (play-chords beat 4 track6-chan chords-prog4)
    (play-seq beat 1 track7-chan prog3)
    (play-random beat 0.25 16 track8-chan chords-prog4)
    (play-random beat 0.25 16 track9-chan chords-prog4)))

(play0 (*metro* 'get-beat 4))
(play1 (*metro* 'get-beat 4))
(play2 (*metro* 'get-beat 4))
(play3 (*metro* 'get-beat 4))
(play4 (*metro* 'get-beat 4))

(*metro* 'set-tempo 72)

(play (*metro* 'get-beat 4))

(define play
  (lambda (beat)
    (play-seq beat 1 track1-chan prog2)))

(define start
  (lambda (beat dur progs)
    (*metro (+ beat
               (* .5 dur (foldl (lambda (acc x) (+ acc (length x))) 0 progs))))))

(define play
  (lambda ()
    (let ((beat (*metro* 'get-beat 4)))
      (callback beat 'play1 beat)
;      (callback (start beat 4 (list prog1)) 'play2 beat)
      (callback (start beat 4 (list prog1)) 'play3 beat)
      (callback (start beat 4 (list prog1 prog3)) 'play1 beat)
;      (callback (*metro* (+ beat s5-start) 'play4 beat))
;      (callback (*metro* (+ beat (length prog4))) 'play1 beat)
;      (callback (*metro* (+ beat (length prog1))) 'play2 beat)
;      (callback (*metro* (+ beat (length prog2))) 'play3 beat)
;      (callback (*metro* (+ beat (length prog3))) 'play1 beat)
;      (callback (*metro* (+ beat (length prog1))) 'play4 beat)
      )))

;(define song (append prog0
;                     prog1
;                     prog2
;                     prog3
;                     prog1
;                     prog4
;                     prog1
;                     prog2
;                     prog3
;                     prog1
;                     prog2
;                     prog2))

(define play-c
  (lambda ()
    (let ((beat (*metro* 'get-beat 4)))
      (play-seq beat 4 track1-chan bass-prog1)
      (play-seq beat 4 track2-chan bass-prog1)
      (play-seq beat 2 track3-chan bass-prog2)
      (play-seq beat 2 track4-chan bass-prog2)
      (play-chords beat 4 track5-chan chords-prog2)
      (play-chords beat 4 track6-chan chords-prog2)
      (play-seq beat 1 track7-chan prog2)
      (play-random beat 0.5 8 track8-chan chords-prog2)
      (play-random beat 0.5 8 track9-chan chords-prog2)
      )))
